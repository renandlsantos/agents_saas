version: '3.8'

services:
  # PostgreSQL com pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: agents-chat-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${LOBE_DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agents-chat

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: agents-chat-redis
    restart: unless-stopped
    volumes:
      - ./data/redis:/data
    networks:
      - agents-chat

  # MinIO para armazenamento de arquivos
  minio:
    image: minio/minio:latest
    container_name: agents-chat-minio
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    networks:
      - agents-chat

  # Casdoor para autenticação
  casdoor:
    image: casbin/casdoor:latest
    container_name: agents-chat-casdoor
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - httpport=8000
      - RUNNING_IN_DOCKER=true
      - driverName=postgres
      - dataSourceName=user=postgres password=${POSTGRES_PASSWORD} host=agents-chat-postgres port=5432 sslmode=disable dbname=casdoor
      - runmode=prod
      - logConfig_console=true
      - logConfig_file=true
      - logConfig_level=Info
    volumes:
      - ./data/casdoor:/app/conf
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - agents-chat

  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: ${DOCKERFILE_PATH:-Dockerfile}
    image: agents-chat:local
    container_name: agents-chat
    restart: unless-stopped
    ports:
      - "${LOBE_PORT:-3210}:3210"
    environment:
      # Fix para erros de CSP (Three.js)
      - NEXT_PUBLIC_CSP_DISABLED=true
      # Banco de Dados
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@agents-chat-postgres:5432/${LOBE_DB_NAME}
      - DATABASE_DRIVER=node
      # Redis
      - REDIS_URL=${REDIS_URL:-redis://agents-chat-redis:6379}
      # MinIO/S3
      - S3_ENDPOINT=${S3_ENDPOINT:-http://agents-chat-minio:9000}
      - S3_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - S3_BUCKET=${MINIO_LOBE_BUCKET}
      - S3_PUBLIC_DOMAIN=${S3_PUBLIC_DOMAIN:-${NEXT_PUBLIC_SITE_URL}:9000}
      - NEXT_PUBLIC_S3_DOMAIN=${NEXT_PUBLIC_S3_DOMAIN:-${NEXT_PUBLIC_SITE_URL}:9000}
      - S3_ENABLE_PATH_STYLE=${S3_ENABLE_PATH_STYLE:-1}
      # Autenticação
      - AUTH_URL=${AUTH_URL:-${NEXT_PUBLIC_SITE_URL}}
      - AUTH_TRUST_HOST=${AUTH_TRUST_HOST:-true}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-${NEXT_PUBLIC_SITE_URL}}
      - NEXTAUTH_URL_INTERNAL=${NEXTAUTH_URL_INTERNAL:-http://localhost:3210}
      - NEXT_AUTH_SSO_PROVIDERS=${NEXT_AUTH_SSO_PROVIDERS:-credentials}
      # Aplicação
      - APP_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_SERVICE_MODE=server
      - NEXT_PUBLIC_ENABLE_NEXT_AUTH=${NEXT_PUBLIC_ENABLE_NEXT_AUTH:-1}
      - HOST=${HOST:-0.0.0.0}
      - HOSTNAME=${HOSTNAME:-0.0.0.0}
      - PORT=3210
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=2048
      # Segurança
      - NEXT_AUTH_SECRET=${NEXT_AUTH_SECRET}
      - KEY_VAULTS_SECRET=${KEY_VAULTS_SECRET}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AZURE_API_KEY=${AZURE_API_KEY}
      - AZURE_ENDPOINT=${AZURE_ENDPOINT}
      - AZURE_API_VERSION=${AZURE_API_VERSION}
      # Configurações opcionais
      - ACCESS_CODE=${ACCESS_CODE}
      - FEATURE_FLAGS=${FEATURE_FLAGS}
      - DEBUG=${DEBUG}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - agents-chat
    volumes:
      - ./logs/app:/app/logs

networks:
  agents-chat:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
